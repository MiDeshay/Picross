/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./game_logic/board.js":
/*!*****************************!*\
  !*** ./game_logic/board.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tile */ \"./game_logic/tile.js\");\n\n\nclass Board{\n    constructor(size, puzzleObject){\n        this.puzzleObject = puzzleObject;\n        this.size = size\n        this.winning = false;\n        this.grid = this.makeGrid()\n        this.makeHints.bind(this)()\n        this.allTileEls = document.getElementsByClassName(\"grid-tile\");\n\n    }\n\n    // handleMouseHover(){\n        \n    // }\n\n    // getHorizantalHoverLines(tileEl){\n    //     let arr = [];\n    //     for(let i = 0; i < this.size; i++){\n    //         for(let j = 0; j < this.size; j++){\n    //             let column = tileEl.getAttribute(\"y-cor\");\n    //             let otherTile = this.allTileEls[i]\n            \n    //         }\n    //     }\n\n    // }\n\n    // getVerticalHoverLines(){\n\n    // }\n\n    // renderlines(){\n\n    // }\n\n    async winTheGame(){\n        if (!this.winning){\n            this.winning = true;\n            const sleep = function(milliseconds){\n                return new Promise(function(resolve){\n                    setTimeout(resolve, milliseconds);\n                }).catch(function(err){}) \n            }\n            for(let i = 0; i < this.size; i++){\n                for(let j = 0; j < this.size; j++){\n                    let tile = this.grid[i][j];\n\n                    if(!tile.solved){\n                        if(tile.needToFill){\n                            tile.tileEl.style.backgroundColor = \"black\";\n                            \n                        }else{\n                            let x = document.createTextNode(\"x\")\n                            tile.tileEl.appendChild(x);\n                        }\n                        tile.filled = true;\n                        tile.solved = true;\n                    }\n                    await sleep(30);\n                }\n            }\n            let gameBoard = document.getElementById(\"game-board\");\n            gameBoard.click()\n     \n        }\n        \n    }\n\n\n    livesLost(){\n        if(this.grid){\n            let livesLost = 0;\n            for(let i = 0; i < this.size; i++){\n                for(let j = 0; j < this.size; j++){\n                    if(this.grid[i][j].wrongAnswer){\n                        livesLost += 1;\n                    }\n                }\n            }\n            \n            return livesLost;\n        }\n       \n    }\n\n\n    \n    generateRowHints(){\n        let allRowHints = [];\n\n        for(let i = 0; i < this.size; i++){\n            let rowToCheck = this.grid[i];\n            let rowHints = [];\n            let num = 0;\n            let counting = false;\n            for(let i = 0; i < rowToCheck.length; i++){\n                if (rowToCheck[i].needToFill){\n                    counting = true;\n                    num++;\n                } \n                \n                if(counting && !rowToCheck[i].needToFill){\n                    rowHints.push(num);\n                    counting = false;\n                    num = 0;\n                }\n            }\n\n            if (num != 0){\n                rowHints.push(num);\n            }\n            \n            allRowHints.push(rowHints.slice().reverse())\n\n        }\n        return allRowHints;\n    }\n\n    generateColHints(){\n        let allColHints = [];\n\n        for(let i = 0; i < this.size; i++){\n            let colHints = [];\n            let num = 0;\n            let counting = false;\n\n            for(let j = 0; j < this.size; j++){\n                let colEl = this.grid[j][i];\n\n                if (colEl.needToFill){\n                    counting = true;\n                    num++;\n                }\n\n                if (counting && !colEl.needToFill){\n                    colHints.push(num);\n                    counting = false;\n                    num = 0;\n                }\n\n            }\n\n            if (num != 0){\n                colHints.push(num);\n            }\n            //puts in the hints backwards so they can be rendered forwards\n            allColHints.push(colHints.slice().reverse());\n            \n        }\n        return allColHints;\n\n    }\n\n\n    //makeHints() calls two helper functions to add hints\n    makeHints(){\n        let rowHints = this.generateRowHints.bind(this)();\n        let colHints = this.generateColHints.bind(this)();\n\n        this.renderColHints.bind(this)(colHints);\n        this.renderRowHints.bind(this)(rowHints);\n    }\n\n    renderRowHints(rowHints){\n        let size = this.size/2 + 1\n\n        for(let i = 0; i < this.size; i++){\n            for(let j = 0; j < size; j++){\n                let pos = 0;\n                if (this.size % 2 === 0){\n                    pos = size -1 - j;\n                }else{\n                    pos = Math.floor(size-j)\n                }\n                let hintTile = document.getElementById(`side${i+1}${pos}`);\n                if (rowHints[i][j]){\n                let hint = document.createTextNode(`${rowHints[i][j]}`);\n                hintTile.append(hint);\n                }\n            }\n        }\n    }\n\n    renderColHints(colHints){\n        let size = this.size/2 + 1\n\n        for(let i = 0; i < this.size; i++){\n            for(let j = 0; j < size; j++){\n                let pos = 0;\n                if (this.size % 2 === 0){\n                    pos = size -1 - j;\n                }else{\n                    pos = Math.floor(size-j)\n                }\n                \n                let hintTile = document.getElementById(`top${i}${pos}`);\n                if (colHints[i][j]){\n                let hint = document.createTextNode(`${colHints[i][j]}`);\n                hintTile.append(hint);\n                }                \n            }\n        }\n    }\n\n    //checkTileFill: calls method on tile object which will pass true or false if \n    //the fill attempt was succesful. If correct, the tile objects method will\n    //change the tile color and this function will return true. Otherwise, this\n    //method will return false and the game object will handle taking away a life\n \n\n    //refactor make grid to create a board with new tiles based on\n    // the info in the puzzle string\n    makeGrid(){\n\n        let grid = [];\n        for(let i = 0; i < this.size; i++){\n            let sub = [];\n            for(let j = 0; j < this.size; j++){\n                let id = `${i+1}${j+1}`;\n                let tileEl = document.getElementById(id);\n                let tileColor = this.puzzleObject[\"pictureArray\"][i][j];\n                let needToFill = this.puzzleObject[\"logicArray\"][i][j];\n\n                if (needToFill === \"false\"){\n                    needToFill = false;\n                }\n        \n                let tile = new _tile__WEBPACK_IMPORTED_MODULE_0__[\"default\"](tileEl, tileColor, needToFill);\n                sub.push(tile);\n               \n            }\n            grid.push(sub);\n        }\n        return grid;\n    }\n\n    //won? function returns true if board is solved\n    won(){\n        if(this.grid){\n            for(let i = 0; i < this.size; i++){\n                for(let j = 0; j < this.size; j++){\n                    let tile = this.grid[i][j]\n                    if (tile.needToFill && !tile.solved){\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n        \n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Board);\n\n//# sourceURL=webpack://picrossjsproject/./game_logic/board.js?");

/***/ }),

/***/ "./game_logic/game.js":
/*!****************************!*\
  !*** ./game_logic/game.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./board */ \"./game_logic/board.js\");\n\n\nclass Game{\n    constructor(size, puzzleObject){\n        this.size = size;\n        this.puzzleName = puzzleObject[\"name\"];\n        this.board = new _board__WEBPACK_IMPORTED_MODULE_0__[\"default\"](size, puzzleObject);\n        this.lives = Math.floor(size/2) + 1;\n        this.gameOverLose = false;\n        this.gameOverWin = false;\n        this.lifeTracker.bind(this)();\n\n        this.gameBoardEl = document.getElementById(\"game-board\");\n        this.gameBoardEl.addEventListener(\"click\", function(){\n            this.lifeTracker.bind(this)();\n\n            if(!this.gameOverLose){\n                this.won.bind(this)();\n            }\n            \n        }.bind(this))\n\n        let winTheGameButton = document.getElementById(\"lives-heart\");\n        winTheGameButton.addEventListener(\"click\", function(){\n            this.board.winTheGame()\n        }.bind(this))\n\n    \n    }\n\n    lifeTracker(){\n        let num = this.lives - this.board.livesLost();\n\n        if(num === 0){\n            let gameScreen = document.getElementById(\"game-screen\");\n            let gameOverScreen = document.getElementById(\"game-over-screen\");\n            let gameFooterLinks = document.getElementsByClassName(\"game-footer-links\")\n\n            for(let i = 0; i < gameFooterLinks.length; i++){\n                gameFooterLinks[i].style.display = \"none\"\n            }\n            gameOverScreen.style.display = \"flex\";\n            gameScreen.style.display = \"none\";\n            this.gameOverLose = true;\n        }else{\n            let livesDisplay = document.getElementById(\"lives\");\n            if(livesDisplay.firstChild){\n                livesDisplay.removeChild(livesDisplay.firstChild);\n            }\n            let text = `${num}`;\n            while(livesDisplay.firstChild){\n                livesDisplay.removeChild(livesDisplay.firstChild)\n            }\n            livesDisplay.append(text);\n\n           \n\n            \n            \n        }\n    }\n\n\n\n    //won? calls board won? function to see if the board is won.\n    //If so calls a board function which reveals background tiles, hides hints,\n    // and reveals the board's name. \n    //then calls a helper method which reveals new game and home\n    // button below the picture\n\n    won(){\n        if (this.board.won()){\n            let cursorToggle = document.getElementById(\"toggle\")\n\n            cursorToggle.style.display = \"none\";\n\n            \n            for(let i = 0; i < this.size; i++){\n                for(let j = 0; j < this.size; j++){\n                    let tile = this.board.grid[i][j];\n\n                    tile.clickable = false;\n                    tile.tileEl.innerHTML = \"\";\n \n                    tile.tileEl.style.backgroundColor = tile.color\n                    \n                    \n                }\n            }\n            let tiles = document.getElementsByClassName(\"grid-tile\");\n            for(let i = 0; i < tiles.length; i++){\n                tiles[i].style.border = \"none\";\n            }\n\n            let hints = document.getElementsByClassName(\"hint-tile\");\n            for(let i = 0; i < hints.length; i++){\n                hints[i].style.display = \"none\";\n            }\n\n            let livesDisplay = document.getElementById(\"lives-container\")\n            livesDisplay.style.display = \"none\";\n\n            let pauseButton = document.getElementById(\"pause-button\")\n            pauseButton.style.display = \"none\";\n\n            let newGameButton = document.getElementById(\"new-game-button\")\n            newGameButton.style.display = \"none\";\n\n            let winButtons = document.getElementsByClassName(\"game-won-buttons\")\n            for(let i = 0; i < winButtons.length; i++){\n                winButtons[i].style.display = \"flex\";\n            }\n\n            let gameBoard = document.getElementById(\"game-board\");\n            gameBoard.style.position = \"fixed\";\n            gameBoard.style.marginLeft = \"-140px\"\n            gameBoard.style.marginTop = \"50px\"\n            \n            let puzzleTitle = document.getElementById(\"puzzle-title\");\n            if(puzzleTitle.firstChild){\n                puzzleTitle.removeChild(puzzleTitle.firstChild);\n            }\n            let title = document.createTextNode(`${this.puzzleName}`)\n            puzzleTitle.append(title);\n            puzzleTitle.style.display = \"flex\";\n\n\n           this.gameOver = true;\n            return true;\n        }else{\n            return false;\n        }\n    }\n\n    \n    //lost? reveals pop up page informing the player that they've\n    //lost with page allowing them to continue, start over, or go home\n    \n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Game);\n\n//# sourceURL=webpack://picrossjsproject/./game_logic/game.js?");

/***/ }),

/***/ "./game_logic/puzzles.js":
/*!*******************************!*\
  !*** ./game_logic/puzzles.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"allPuzzles\": function() { return /* binding */ allPuzzles; }\n/* harmony export */ });\n// let puzzleOne5x5 = {\n//     name: \"Ball\",\n//     pictureArray:   [[\"blue\", \"blue\", \"blue\",  \"blue\",  \"blue\"],\n//                     [ \"blue\", \"red\", \"red\", \"red\",  \"blue\" ],\n//                     [ \"blue\", 'red', \"red\", \"red\",  \"blue\" ],\n//                     [ \"blue\", \"red\", \"red\", 'red',  \"blue\" ],\n//                     [ \"blue\",  \"blue\", \"blue\",  \"blue\",  \"blue\" ]],\n    \n//     logicArray:          [['false', 'false', 'false', 'false', 'false'],\n//                     ['false', true, true, true, 'false' ],\n//                     ['false', true, true, true, 'false' ],\n//                     ['false', true, true, true, 'false' ],\n//                     ['false', 'false', 'false', 'false', 'false' ]]\n// }\n\nlet puzzleKey = {\n    'lr': [\"indianred\", false],\n    'Lr': [\"indianred\", true],\n\n    'rd': [\"firebrick\", false],\n    'Rd': [\"firebrick\", true],\n\n\n\n    'lp': [\"lightpink\", false],\n    'Lp': [\"lightpink\", true],\n\n    'pk': [\"pink\", false],\n    'Pk': [\"pink\", true],\n\n\n\n    'gy': [\"grey\", false],\n    'Gy': [\"grey\", true],\n\n    'bl': [\"black\", false],\n    'Bl': [\"black\", true],\n\n    'wt': [\"ivory\", false],\n    'Wt': [\"ivory\", true],\n\n\n\n    'lo': [\"gold\", false],\n    'Lo': [\"gold\", true],\n\n    'og': [\"orange\", false],\n    'Og': [\"orange\", true],\n\n\n    'br': [\"saddlebrown\", false],\n    'Br': [\"saddlebrown\", true],\n\n    'ds': [\"#3c1414\", false], //darksiena\n    'Ds': [\"#3c1414\", true], \n\n\n    'lb': [\"lightblue\", false],\n    'Lb': [\"lightblue\", true],\n\n    'bu': [\"deepskyblue\", false],\n    'Bu': [\"deepskyblue\", true],\n\n\n\n    'lg': [\"lightgreen\", false],\n    'Lg': [\"lightgreen\", true],\n\n    'gr': [\"olivedrab\", false],\n    'Gr': [\"olivedrab\", true],\n\n\n\n    'ly': [\"lightyellow\", false],\n    'Ly': [\"lightyellow\", true],\n\n    'yl': [\"yellow\", false],\n    'Yl': [\"yellow\", true],\n\n    'dg': [\"darkgoldenrod\", false],\n    'Dg': [\"darkgoldenrod\", true],\n\n\n\n    'pl': [\"lightpurple\", false],\n    'Pl': [\"lightpurple\", true],\n\n    'pr': [\"rebeccapurple\", false],\n    'Pr': [\"rebeccapurple\", true],\n\n}\n\n//10x10 white canvas \n//[['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n// ['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n// ['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n// ['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n// ['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n// ['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n// ['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n// ['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n// ['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n// ['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt']]\n\n\nlet ballArr =   [[\"bl\", \"bl\", \"bl\",  \"bl\",  \"bl\"],\n            [ \"bl\", \"lr\", \"lr\", \"lr\",  \"bl\" ],\n            [ \"bl\", 'rd', \"Rd\", \"rd\",  \"bl\" ],\n            [ \"bl\", \"lr\", \"rd\", 'lr',  \"bl\" ],\n            [ \"bl\",  \"bl\", \"bl\",  \"bl\",  \"bl\" ]]\n\nlet testArr = [['Bl', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt']]\n\n\nlet cherryArray =    [['wt', 'Gr', 'Gr', 'Gr', 'wt', 'wt', 'wt', 'Lg', 'wt', 'wt'],\n                ['wt', 'wt', 'Gr', 'Gr', 'Gr', 'wt', 'Lg', 'wt', 'wt', 'wt'],\n                ['wt', 'wt', 'wt', 'wt', 'wt', 'Lg', 'wt', 'Gr', 'wt', 'wt'],\n                ['wt', 'wt', 'wt', 'wt', 'Lg', 'wt', 'Gr', 'Gr', 'Gr', 'wt'],\n                ['wt', 'wt', 'wt', 'Lg', 'wt', 'wt', 'Gr', 'Gr', 'Gr', 'wt'],\n                ['wt', 'wt', 'Rd', 'Rd', 'wt', 'wt', 'Gr', 'Gr', 'Gr', 'wt'],\n                ['wt', 'Rd', 'Lr', 'Rd', 'Rd', 'wt', 'wt', 'Gr', 'wt', 'wt'],\n                ['wt', 'Rd', 'Rd', 'Rd', 'Rd', 'wt', 'wt', 'wt', 'wt', 'wt'],\n                ['wt', 'wt', 'Rd', 'Rd', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n                ['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt']]\n\nlet pikachuArray = [ ['Bl', 'Yl', 'Yl', 'Br', 'bu', 'bu', 'bu', 'bu', 'bu', 'Br'],\n                    ['Bl', 'Dg', 'Yl', 'Dg', 'Br', 'bu', 'bu', 'bu', 'Br', 'Dg'],\n                    ['bu', 'Br', 'Dg', 'Yl', 'Dg', 'Br', 'Br', 'Br', 'Dg', 'Yl'],\n                    ['bu', 'bu', 'Br', 'Dg', 'Yl', 'Ly', 'Ly', 'Yl', 'Yl', 'Dg'],\n                    ['bu', 'bu', 'Br', 'Yl', 'Yl', 'Ly', 'Ly', 'Yl', 'Yl', 'Yl'],\n                    ['lb', 'lb', 'Dg', 'Wt', 'bl', 'Yl', 'Yl', 'Yl', 'Wt', 'bl'],\n                    ['lb', 'Dg', 'Yl', 'bl', 'ds', 'Yl', 'Yl', 'Yl', 'bl', 'ds'],\n                    ['lb', 'Rd', 'Lr', 'Yl', 'Yl', 'Yl', 'Br', 'Yl', 'Yl', 'Yl'],\n                    ['wt', 'Rd', 'Rd', 'Lo', 'Yl', 'Br', 'Dg', 'Br', 'Yl', 'Lo'],\n                    ['wt', 'wt', 'Br', 'Dg', 'Lo', 'Lo', 'Lo', 'Lo', 'Lo', 'Dg']]\n\nlet PinocchioArray =   [['wt', 'wt', 'wt', 'wt', 'Yl', 'wt', 'wt', 'wt', 'wt', 'wt'],\n                        ['wt', 'Yl', 'Bu', 'Yl', 'Bl', 'Bl', 'wt', 'wt', 'wt', 'wt'],\n                        ['wt', 'Bu', 'Yl', 'Bl', 'Bl', 'Bl', 'Bl', 'wt', 'wt', 'wt'],\n                        ['wt', 'Yl', 'Pk', 'Bu', 'Pk', 'Bu', 'wt', 'wt', 'wt', 'wt'],\n                        ['Yl', 'Pk', 'Pk', 'Pk', 'Pk', 'Pk', 'Pk', 'Pk', 'Pk', 'Pk'],\n                        ['wt', 'Bl', 'Pk', 'Pk', 'Pk', 'Pk', 'wt', 'wt', 'wt', 'wt'],\n                        ['wt', 'wt', 'Bu', 'Bu', 'Pk', 'Bu', 'wt', 'wt', 'wt', 'wt'],\n                        ['wt', 'Gy', 'Gy', 'Bu', 'Gr', 'Bu', 'Gy', 'wt', 'wt', 'wt'],\n                        ['wt', 'Gy', 'Bu', 'Bu', 'Gy', 'Bu', 'Bu', 'Yl', 'wt', 'wt'],\n                        ['wt', 'Yl', 'Bu', 'Bu', 'Yl', 'Bu', 'Bu', 'Yl', 'wt', 'wt']]\n\n\nlet miniPatternArray = [['Lg', 'Lg', 'wt', 'wt', 'Pr', 'Bu', 'wt', 'wt', 'Lb', 'Lb'],\n                        ['Lg', 'wt', 'Pk', 'Pk', 'Pr', 'Bu', 'Og', 'Og', 'wt', 'Lb'],\n                        ['wt', 'Og', 'wt', 'Pr', 'Pr', 'Bu', 'Bu', 'wt', 'Pk', 'wt'],\n                        ['wt', 'Og', 'Bu', 'wt', 'Pr', 'Bu', 'wt', 'Pr', 'Pk', 'wt'],\n                        ['Bu', 'Bu', 'Bu', 'Bu', 'Bu', 'Bu', 'Pr', 'Pr', 'Pr', 'Pr'],\n                        ['Pr', 'Pr', 'Pr', 'Pr', 'Bu', 'Bu', 'Bu', 'Bu', 'Bu', 'Bu'],\n                        ['wt', 'Pk', 'Pr', 'wt', 'Bu', 'Pr', 'wt', 'Bu', 'Og', 'wt'],\n                        ['wt', 'Pk', 'wt', 'Bu', 'Bu', 'Pr', 'Pr', 'wt', 'Og', 'wt'],\n                        ['Lb', 'wt', 'Og', 'Og', 'Bu', 'Pr', 'Pk', 'Pk', 'wt', 'Lg'],\n                        ['Lb', 'Lb', 'wt', 'wt', 'Bu', 'Pr', 'wt', 'wt', 'Lg', 'Lg']]\n\n let OrangeArray = [['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'Bl', 'Bl'],\n                    ['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'Bl', 'Bl', 'wt'],\n                    ['wt', 'wt', 'Bl', 'Bl', 'Bl', 'Bl', 'Bl', 'Bl', 'Bl', 'Og'],\n                    ['wt', 'wt', 'Bl', 'wt', 'wt', 'wt', 'wt', 'wt', 'Og', 'Og'],\n                    ['Og', 'Og', 'Bl', 'Og', 'Og', 'Og', 'Og', 'wt', 'wt', 'wt'],\n                    ['Og', 'Og', 'Bl', 'Og', 'Og', 'Og', 'Og', 'wt', 'wt', 'wt'],\n                    ['wt', 'wt', 'Bl', 'wt', 'wt', 'Og', 'Og', 'wt', 'wt', 'wt'],\n                    ['wt', 'wt', 'Bl', 'Bl', 'Bl', 'Bl', 'Bl', 'Bl', 'Bl', 'wt'],\n                    ['wt', 'wt', 'wt', 'wt', 'wt', 'Og', 'Og', 'wt', 'Bl', 'Bl'],\n                    ['wt', 'wt', 'wt', 'wt', 'wt', 'Og', 'Og', 'wt', 'wt', 'Bl']]\n\n\nlet curlyArray =   [['wt', 'Bl', 'Bl', 'Bl', 'Bl', 'Bl', 'Bl', 'Bl', 'Bl', 'wt'],\n                    ['Bu', 'Bl', 'Bu', 'wt', 'Bu', 'wt', 'wt', 'Bl', 'Bl', 'wt'],\n                    ['Bu', 'Bl', 'Bu', 'wt', 'Bu', 'wt', 'wt', 'Bl', 'Bl', 'wt'],\n                    ['Bu', 'Bl', 'wt', 'Bl', 'Bl', 'Bl', 'wt', 'Bl', 'Bl', 'wt'],\n                    ['Bu', 'Bl', 'wt', 'Bl', 'Bl', 'Bl', 'wt', 'Bl', 'Bl', 'wt'],\n                    ['Bu', 'Bl', 'Bu', 'Bl', 'Bu', 'wt', 'Bu', 'Bl', 'Bl', 'Bu'],\n                    ['wt', 'Bl', 'wt', 'Bl', 'Bl', 'Bl', 'Bl', 'Bl', 'Bl', 'wt'],\n                    ['wt', 'Bl', 'wt', 'wt', 'wt', 'wt', 'Bu', 'wt', 'Bu', 'Bu'],\n                    ['Bu', 'Bl', 'Bu', 'Bu', 'wt', 'wt', 'Bu', 'wt', 'wt', 'Bu'],\n                    ['Bu', 'Bl', 'wt', 'Bu', 'wt', 'wt', 'Bu', 'Bu', 'Bu', 'Bu']]\n\nlet instagramArray =    [['wt', 'Pr', 'Pr', 'Pr', 'Pr', 'Pr', 'Pr', 'Pr', 'Pr', 'wt'],\n                        ['Pr', 'Pr', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'Pr', 'Pr'],\n                        ['Pr', 'wt', 'Pr', 'Pr', 'Pr', 'Pr', 'Pr', 'Pr', 'wt', 'Pr'],\n                        ['Yl', 'wt', 'Pr', 'Pr', 'wt', 'wt', 'Pr', 'Pr', 'wt', 'Pr'],\n                        ['Yl', 'wt', 'Og', 'wt', 'Pr', 'Pr', 'wt', 'Pr', 'wt', 'Pr'],\n                        ['Yl', 'wt', 'Og', 'wt', 'Og', 'Pr', 'wt', 'Pr', 'wt', 'Pr'],\n                        ['Yl', 'wt', 'Og', 'Og', 'wt', 'wt', 'Pr', 'Pr', 'wt', 'Pr'],\n                        ['Yl', 'wt', 'Yl', 'Og', 'Og', 'Og', 'Pr', 'Pr', 'wt', 'Pr'],\n                        ['Yl', 'Yl', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'Pr', 'Pr'],\n                        ['wt', 'Yl', 'Yl', 'Yl', 'Yl', 'Yl', 'Yl', 'Pr', 'Pr', 'wt']]\n\nlet amongUsArray = [['wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt', 'wt'],\n                    ['wt', 'wt', 'wt', 'Rd', 'Rd', 'Rd', 'Rd', 'wt', 'wt', 'wt'],\n                    ['wt', 'wt', 'Rd', 'Rd', 'Rd', 'Rd', 'Rd', 'Rd', 'wt', 'wt'],\n                    ['wt', 'wt', 'Rd', 'Rd', 'Bu', 'Lb', 'Lb', 'Lb', 'Lb', 'wt'],\n                    ['wt', 'Bl', 'Rd', 'Rd', 'Bu', 'Bu', 'Bu', 'Bu', 'Bu', 'wt'],\n                    ['wt', 'Bl', 'Rd', 'Rd', 'Rd', 'Rd', 'Rd', 'Rd', 'wt', 'wt'],\n                    ['wt', 'Bl', 'Rd', 'Rd', 'Rd', 'Rd', 'Rd', 'Rd', 'wt', 'wt'],\n                    ['wt', 'Bl', 'Rd', 'Rd', 'Rd', 'Rd', 'Rd', 'Rd', 'wt', 'wt'],\n                    ['wt', 'wt', 'Rd', 'Rd', 'wt', 'wt', 'Rd', 'Rd', 'wt', 'wt'],\n                    ['wt', 'wt', 'Rd', 'Rd', 'wt', 'wt', 'Rd', 'Rd', 'wt', 'wt']]\n\nfunction puzzleGenerator(length, name, array){\n    let puzzle = {}\n\n    puzzle[\"length\"] = length;\n    puzzle['name'] = name;\n\n    let pictureArray = [];\n    let logicArray = [];\n\n    for(let i = 0; i < length; i++){\n        let picSub = [];\n        let logicSub = [];\n        for(let j = 0; j < length; j++){\n            let tile = array[i][j];\n            picSub.push(puzzleKey[tile][0]);\n            logicSub.push(puzzleKey[tile][1]); \n        }\n        pictureArray.push(picSub);\n        logicArray.push(logicSub);\n    }\n\n    puzzle[\"pictureArray\"] = pictureArray;\n    puzzle[\"logicArray\"] = logicArray;\n\n    return puzzle;\n\n}\n    let bigTestPuzzle = puzzleGenerator(10, 'Test Of Title', testArr)\n    let ballPuzzle = puzzleGenerator(5, \"Red Ball\", ballArr);\n\n    let cherryPuzzle = puzzleGenerator(10, \"Cherry\", cherryArray);\n    let pickachuPuzzle = puzzleGenerator(10, \"Pikachu by Martego\", pikachuArray);\n    let pinocchioPuzzle = puzzleGenerator(10, \"Pinocchio\", PinocchioArray );\n    let miniPatternPuzzle = puzzleGenerator(10, \"Mini Pattern by aleonblue\", miniPatternArray);\n    let orangePuzzle = puzzleGenerator(10,\"Orange N Stuff\", OrangeArray )\n    let curlyPuzzle = puzzleGenerator(10, \"Curlycue\", curlyArray  )\n    let instagramPuzzle = puzzleGenerator(10, \"Instagram\", instagramArray)\n    let amongUsPuzzle = puzzleGenerator(10, \"Wasn't Me...\", amongUsArray)\n\n    let allPuzzles = [ \n        cherryPuzzle, \n        pickachuPuzzle, \n        pinocchioPuzzle, \n        miniPatternPuzzle,\n        orangePuzzle,\n        curlyPuzzle,\n        instagramPuzzle,\n        amongUsPuzzle\n    ]\n\n    \n\n//function stringtopuzzle takes a length, a string, an array\n//returns a puzzle object\n\n//length is size of puzzle\n\n//first string = puzzle name\n\n//array = coded puzzle\n//syntax: lowercase chars for background, \n//uppercase chars for main puzzle\n//color abbreviations\n\n\n\n\n\n\n\n//# sourceURL=webpack://picrossjsproject/./game_logic/puzzles.js?");

/***/ }),

/***/ "./game_logic/tile.js":
/*!****************************!*\
  !*** ./game_logic/tile.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nclass Tile{\n    constructor(tileEl, color, needToFill){\n        this.tileEl = tileEl\n        this.color = color;\n        this.needToFill = needToFill;\n        this.wrongAnswer = false;\n        this.filled = false;\n        this.clickable = true;\n        this.fillButton = document.getElementById(\"toggle-fill\")\n        this.xButton = document.getElementById(\"toggle-x\")\n\n        this.tileEl.addEventListener(\"click\", function(){\n             \n            if(this.clickable){\n                this.checkClick.bind(this)()\n            }\n            \n        }.bind(this))\n    }\n\n    checkClick(){\n        if (this.fillButton.hasAttribute(\"selected\")){\n            if (this.needToFill && this.tileEl.innerHTML === \"\"){\n                this.tileEl.style.backgroundColor = \"black\";\n                this.filled = true;\n                \n            }else{\n                if (!this.needToFill && this.tileEl.innerHTML === \"\"){\n                    let x = document.createTextNode(\"x\")\n                    this.tileEl.appendChild(x); \n                    this.tileEl.style.color = \"red\";\n                    this.wrongAnswer = true;\n                    this.filled = true;\n                }\n                \n            }\n            \n            \n        }else{\n            if(!this.filled){\n                if (this.tileEl.innerHTML === \"\"){\n                let x = document.createTextNode(\"x\")\n                this.tileEl.appendChild(x);\n                }else{\n                    this.tileEl.removeChild(this.tileEl.firstChild);\n                }\n            }\n\n        }\n        \n        this.solved = true;\n    }\n\n\n\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Tile);\n\n//# sourceURL=webpack://picrossjsproject/./game_logic/tile.js?");

/***/ }),

/***/ "./src/game-view.js":
/*!**************************!*\
  !*** ./src/game-view.js ***!
  \**************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game_logic_game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../game_logic/game */ \"./game_logic/game.js\");\n\n\n\nclass View{\n    constructor(htmlEl, allPuzzles){\n        this.allPuzzles = allPuzzles\n        this.puzzleObject = this.allPuzzles[Math.floor(Math.random() * this.allPuzzles.length)]\n        this.boardSize = this.puzzleObject[\"length\"];\n        this.htmlEl = htmlEl;\n\n\n        this.handleHomeButtonClicK();\n        this.handleToggleCursorClick();\n        this.handleStartOverButtonClick.bind(this)()\n        this.createHtmlGrid.bind(this)();\n        this.handlePauseButtonClick();\n        this.handleContinueButtonClick();\n        \n        this.game = new _game_logic_game__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.boardSize, this.puzzleObject);\n      \n        this.handleNewGameButtonClick.bind(this)();\n    }\n\n    handleHomeButtonClicK(){\n        let allHomeButtons = document.getElementsByClassName(\"home-button\")\n        for(let i = 0; i < allHomeButtons.length; i++){\n            allHomeButtons[i].addEventListener(\"click\", function(){\n                window.location.replace('../index.html')\n            })\n        }\n        \n    }\n\n    handleToggleCursorClick(){\n        let fillButton = document.getElementById(\"toggle-fill\");\n        let xButton = document.getElementById(\"toggle-x\");\n        let fillButtonPic = document.getElementById(\"fill-image\");\n        let xButtonPic = document.getElementById(\"x-image\");\n        \n        fillButton.setAttribute(\"selected\", \"true\");\n\n        fillButton.addEventListener('click', function(){\n            if(!fillButton.hasAttribute(\"selected\")){\n                xButton.removeAttribute(\"selected\");\n                fillButton.setAttribute(\"selected\", \"true\");\n\n                xButtonPic.src = \"../pictures/XReleased.png\";\n                fillButtonPic.src = \"../pictures/FillSelected.png\";  \n            }else{\n                fillButtonPic.src = \"../pictures/FillSelected.png\";\n            }\n        })\n\n        xButton.addEventListener('click', function(){\n            if(!xButton.hasAttribute(\"selected\")){\n                xButton.setAttribute(\"selected\", \"true\");\n                fillButton.removeAttribute(\"selected\");\n\n                xButtonPic.src = \"../pictures/XPressed.png\"\n                fillButtonPic.src = \"../pictures/FillRelease.png\";\n            }\n        })\n\n        fillButton.click();\n    }\n\n    handleNewGameButtonClick(){\n       \n        let allNewGameButtons = document.getElementsByClassName(\"new-game-button\");\n        // let gameFooterLinks = document.getElementsByClassName(\"game-footer-links\");\n        // let pauseScreen = document.getElementById(\"pause-menu-screen\");\n        // let gameOverScreen = document.getElementById(\"game-over-screen\");\n        // let gameScreen = document.getElementById(\"game-screen\");\n        // let gameBoard = document.getElementById(\"game-board\");\n        // let puzzleTitle = document.getElementById(\"puzzle-title\");\n        // let livesContainer = document.getElementById(\"lives-container\")\n        // let pauseButton = document.getElementById(\"pause-button\")\n        // let newGameButton = document.getElementById(\"new-game-button\")\n        // let cursorToggle = document.getElementById(\"toggle\")\n        // let gameWonButtons = document.getElementsByClassName(\"game-won-buttons\")\n\n            \n\n        for(let i = 0; i < allNewGameButtons.length; i++){\n            let button = allNewGameButtons[i];\n\n            button.addEventListener(\"click\", function(){\n\n                location.reload()\n\n            })\n        }\n    }\n                //I thought I would add music so I wanted to avoid reloading so it persisted.\n\n\n                //This deletes the old game grid\n                //this is neccessary since the grid actually persists\n                //through the reset process\n                \n            //     delete this.game.board.grid;\n  \n            //     while(this.htmlEl.firstChild){\n            //         this.htmlEl.removeChild(this.htmlEl.lastChild);\n            //     }\n\n            //     for(let i = 0; i < gameFooterLinks.length; i++){\n            //         gameFooterLinks[i].style.display = \"flex\"\n            //     }\n\n            //     for(let i = 0; i < gameWonButtons.length; i++){\n            //         gameWonButtons[i].style.display = \"none\"\n            //     }\n\n            //     this.puzzleObject = this.allPuzzles[Math.floor(Math.random() * this.allPuzzles.length)]\n\n            //     this.boardSize = this.puzzleObject[\"length\"];\n            //     this.createHtmlGrid();\n                \n            //     this.game = new Game(this.boardSize, this.puzzleObject);\n                \n            //     gameBoard.style.position = \"relative\";\n            //     gameBoard.style.margin = \"0px\";\n            //     cursorToggle.style.display = \"initial\";\n            //     puzzleTitle.style.display = \"none\";\n            //     pauseButton.style.display = \"initial\";\n            //     newGameButton.style.display = \"initial\";\n            //     livesContainer.style.display = \"initial\";\n            //     pauseScreen.style.display = \"none\";\n            //     gameOverScreen.style.display = \"none\"\n            //     gameScreen.style.display = \"flex\";\n\n\n            // //nudging heart into right spot\n            //     let livesHeartPic = document.getElementById(\"lives-heart\");\n            //     if(this.boardSize === 5){\n            //         livesHeartPic.style.paddingLeft = \"6px\"\n            //     }else{\n            //         livesHeartPic.style.paddingLeft = \"0px\"\n            //     }\n            // }.bind(this))\n\n            //or just VVV\n\n            \n\n       \n\n\n    \n\n    handleStartOverButtonClick(){\n        let allStartOverButtons = document.getElementsByClassName(\"start-over-button\");\n        let pauseScreen = document.getElementById(\"pause-menu-screen\");\n        let gameScreen = document.getElementById(\"game-screen\");\n        let gameOverScreen = document.getElementById(\"game-over-screen\");\n        let gameFooterLinks = document.getElementsByClassName(\"game-footer-links\");\n       \n\n\n        for(let i = 0; i < allStartOverButtons.length; i++){\n            let button = allStartOverButtons[i];\n            button.addEventListener(\"click\", function(){\n\n                //This deletes the old game grid\n                //this is neccessary since the grid actually persists\n                //through the reset process\n                delete this.game.board.grid;\n\n\n                while(this.htmlEl.firstChild){\n                    this.htmlEl.removeChild(this.htmlEl.lastChild);\n                }\n                \n                this.createHtmlGrid();\n                for(let i = 0; i < gameFooterLinks.length; i++){\n                    gameFooterLinks[i].style.display = \"flex\"\n                }\n              \n                this.game = new _game_logic_game__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.boardSize, this.puzzleObject);\n                \n               \n                pauseScreen.style.display = \"none\";\n                gameOverScreen.style.display = \"none\"\n                gameScreen.style.display = \"flex\";\n    \n               \n            }.bind(this))\n        }\n\n        \n\n        \n    }\n\n    handlePauseButtonClick(){\n        let pauseButton = document.getElementById(\"pause-button\");\n        let pauseScreen = document.getElementById(\"pause-menu-screen\");\n        let gameScreen = document.getElementById(\"game-screen\");\n        let gameFooterLinks = document.getElementsByClassName(\"game-footer-links\")\n\n        pauseButton.addEventListener(\"click\", function(){\n            for(let i = 0; i < gameFooterLinks.length; i++){\n                gameFooterLinks[i].style.display = \"none\"\n            }\n            pauseScreen.style.display = \"block\";\n            gameScreen.style.display = \"none\";\n        \n        })\n    }\n\n    handleContinueButtonClick(){\n        let continueButton = document.getElementById(\"continue-button\");\n        let pauseScreen = document.getElementById(\"pause-menu-screen\");\n        let gameScreen = document.getElementById(\"game-screen\");\n        let gameFooterLinks = document.getElementsByClassName(\"game-footer-links\")\n\n        continueButton.addEventListener(\"click\", function(){\n            for(let i = 0; i < gameFooterLinks.length; i++){\n                gameFooterLinks[i].style.display = \"flex\"\n            }\n            pauseScreen.style.display = \"none\";\n            gameScreen.style.display = \"flex\";\n            \n        })\n    }\n\n\n    //call board make grid method now since elements now exist\n    createHtmlGrid(){\n        const board = document.createElement(\"ul\")\n        board.classList.add(\"grid\")\n\n        for(let i = 0; i < this.boardSize + 1; i++){\n            const row = document.createElement(\"ul\")\n            row.classList.add(\"grid-row\")\n\n            for(let j = 0; j < this.boardSize + 1; j++){\n                const tile = document.createElement(\"li\")\n                tile.setAttribute(\"x-cor\", j)\n                tile.setAttribute(\"y-cor\", i)\n                tile.id = `${i}${j}`\n\n                tile.classList.add(\"grid-tile\")\n            \n                if(i === 0 ){\n                    if (j < this.boardSize){\n                    const topHints = document.createElement(\"ul\")\n                    topHints.classList.add(\"top-hints\")\n\n                \n                    let size = this.boardSize/2 + 1\n\n\n                    for(let k = 0; k < size ; k++){\n                        const topHintTile = document.createElement(\"li\");\n                        topHintTile.classList.add(\"top-hint-tile\");\n                        topHintTile.classList.add(\"hint-tile\");\n                        topHintTile.setAttribute(\"id\", `top${j}${k}`);\n                        if(this.boardSize > 5){\n                            if(j === 5){\n                                topHintTile.style.borderLeft = \"2px solid transparent\"\n                            }\n                        }\n                        if(j % 2 === 0){\n                            topHintTile.classList.add(\"colored-in\"); \n                        }\n                        topHints.appendChild(topHintTile);\n\n                    }\n\n                    const top = document.createElement(\"div\")\n                    top.classList.add(\"top-hint-top-tile\")\n                    top.append(topHints)\n                    row.append(top)\n\n                    let paddingSize = 0\n\n                    if (size % 2 === 0){\n                        paddingSize = size * 20; \n                    }else{\n                        paddingSize = (size * 20) + 10;\n                    }\n                    \n                    row.style.padding = `0px 0px 0px ${paddingSize}px`\n                    }\n                \n\n                }else if (j===0){\n                    const sideHints = document.createElement(\"ul\")\n                    sideHints.classList.add(\"side-hints\")\n                    let size = this.boardSize/2 + 1\n\n                    for(let k = 0; k < size ; k++){\n                        const sideHintTile = document.createElement(\"li\")\n                        sideHintTile.classList.add(\"side-hint-tile\")\n                        sideHintTile.classList.add(\"hint-tile\")\n                        if(this.boardSize > 5){\n                            if(i === 5){\n                                sideHintTile.style.borderBottom = \"2px solid transparent\"\n                            }\n                        }\n                        sideHintTile.setAttribute(\"id\", `side${i}${k}`)\n                        if(i % 2 === 0){\n                            sideHintTile.classList.add(\"colored-in\"); \n                        }\n                        sideHints.appendChild(sideHintTile);\n                    }\n                    const side = document.createElement(\"div\")\n                    side.classList.add(\"side-hint-side-tile\")\n                    side.append(sideHints)\n                    row.append(side)\n\n                }else{\n\n                    if (tile.getAttribute(\"x-cor\") === \"1\" && tile.getAttribute(\"y-cor\") === `${this.boardSize}`){\n                        tile.style.borderLeft = \"1px solid black\"\n                        tile.style.borderBottom = \"1px solid black\"\n                    }else if(tile.getAttribute(\"x-cor\") === \"1\"){\n                        tile.style.borderLeft = \"1px solid black\"\n                    }else if (tile.getAttribute(\"y-cor\") === `${this.boardSize}`){\n                        tile.style.borderBottom = \"1px solid black\"\n                    }\n\n                    if(this.boardSize > 5){\n                        if(tile.getAttribute(\"x-cor\") === \"5\"){\n                            tile.style.borderRight = \"2px solid black\"\n                        }\n                        if(tile.getAttribute(\"y-cor\") === \"5\"){\n                            tile.style.borderBottom = \"2px solid black\"\n                        }\n                    }\n                    \n\n                    row.appendChild(tile)\n                }\n\n            }  \n            board.append(row)\n        }\n        this.htmlEl.append(board)\n\n        //adding top marign to small boards\n       \n        if(this.boardSize === 5){\n            board.style.marginTop = \"100px\"; \n        }else{\n            board.style.marginTop = \"0px\";\n        }\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (View);\n\n//# sourceURL=webpack://picrossjsproject/./src/game-view.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game-view */ \"./src/game-view.js\");\n/* harmony import */ var _game_logic_puzzles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../game_logic/puzzles */ \"./game_logic/puzzles.js\");\n\n\n\n\nif(document.URL.includes(\"game.html\")){\n    document.addEventListener(\"DOMContentLoaded\", function(){\n\n\n        const boardEl = document.getElementById(\"game-board\")\n        new _game_view__WEBPACK_IMPORTED_MODULE_0__[\"default\"](boardEl, _game_logic_puzzles__WEBPACK_IMPORTED_MODULE_1__.allPuzzles);\n\n        let infoButton = document.getElementById(\"info-button\")\n        let gameScreen = document.getElementById(\"game-screen\")\n        let instructions = document.getElementById(\"Instructions\");\n        let closeButton = document.getElementsByClassName(\"close-button\");\n        let gameFooterLinks = document.getElementsByClassName(\"game-footer-links\");\n\n\n\n        infoButton.addEventListener(\"click\", function(){\n        for (let i = 0; i < gameFooterLinks.length; i++) {\n            gameFooterLinks[i].style.display = \"none\"\n            \n        }\n        gameScreen.style.display = \"none\";\n        instructions.style.display = \"flex\";\n         })\n        closeButton[0].addEventListener(\"click\", function(){\n            for (let i = 0; i < gameFooterLinks.length; i++) {\n                gameFooterLinks[i].style.display = \"flex\"\n            }\n            gameScreen.style.display = \"flex\";\n            instructions.style.display = \"none\";\n        })\n\n        \n    })\n\n  \n}\n\nif(document.URL.includes(\"index.html\")){\n\n    document.addEventListener(\"DOMContentLoaded\", function(){\n        let infoButton = document.getElementById(\"instructions-button\")\n        let homeMenu = document.getElementById(\"home-main\");\n        let instructions = document.getElementById(\"Instructions\");\n        let closeButton = document.getElementsByClassName(\"close-button\");\n\n        infoButton.addEventListener(\"click\", function(){\n        homeMenu.style.display = \"none\";\n        instructions.style.display = \"flex\";\n    })\n        closeButton[0].addEventListener(\"click\", function(){\n            homeMenu.style.display = \"initial\";\n            instructions.style.display = \"none\";\n        })\n    })\n}\n   \n  \n\n\n\n  \n\n\n//# sourceURL=webpack://picrossjsproject/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;